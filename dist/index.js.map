{
  "version": 3,
  "sources": ["../server/index.ts", "../server/routes.ts", "../shared/schema.ts", "../server/db.ts", "../server/storage.ts", "../server/utils.ts"],
  "sourcesContent": ["import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { serveStatic, log } from \"./utils\"; // Updated import\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"\u2026\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    log(`Error: ${status} - ${message}${err.stack ? ` - Stack: ${err.stack}` : ''}`, \"error\");\n    res.status(status).json({ message });\n    // Removed: throw err; // This would crash the app. Error is logged and response sent.\n  });\n\n  // Serve static files (e.g., your React frontend build)\n  // This should come after API routes.\n  serveStatic(app);\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = process.env.PORT || 5000;\n  server.listen({\n    port: Number(port),\n    host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n", "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertEnquirySchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Simple session store for admin authentication\nconst adminSessions = new Set<string>();\n\nconst generateSessionId = () => {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n};\n\n// Middleware to check admin authentication\nconst requireAuth = (req: any, res: any, next: any) => {\n  const sessionId = req.headers['x-session-id'] || req.cookies?.adminSession;\n  if (!sessionId || !adminSessions.has(sessionId)) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Enquiry routes\n  app.post(\"/api/enquiries\", async (req, res) => {\n    try {\n      const validatedData = insertEnquirySchema.parse(req.body);\n      const enquiry = await storage.createEnquiry(validatedData);\n      \n      // In a real implementation, you would send email notifications here\n      console.log(\"New enquiry received:\", enquiry);\n      \n      res.status(201).json(enquiry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  app.get(\"/api/enquiries\", requireAuth, async (req, res) => {\n    try {\n      const enquiries = await storage.getEnquiries();\n      res.json(enquiries);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/enquiries/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const enquiry = await storage.getEnquiry(id);\n      \n      if (!enquiry) {\n        res.status(404).json({ message: \"Enquiry not found\" });\n        return;\n      }\n      \n      res.json(enquiry);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin authentication routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      // Simple hardcoded admin credentials (in production, use proper hashing)\n      if (username === \"admin\" && password === \"cottage2024\") {\n        const sessionId = generateSessionId();\n        adminSessions.add(sessionId);\n        \n        // Set cookie for browser\n        res.cookie('adminSession', sessionId, {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === 'production',\n          maxAge: 24 * 60 * 60 * 1000 // 24 hours\n        });\n        \n        res.json({ success: true, sessionId });\n      } else {\n        res.status(401).json({ message: \"Invalid credentials\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/auth\", (req: any, res) => {\n    const sessionId = req.headers['x-session-id'] || req.cookies?.adminSession;\n    if (sessionId && adminSessions.has(sessionId)) {\n      res.json({ authenticated: true });\n    } else {\n      res.status(401).json({ authenticated: false });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", (req: any, res) => {\n    const sessionId = req.headers['x-session-id'] || req.cookies?.adminSession;\n    if (sessionId) {\n      adminSessions.delete(sessionId);\n    }\n    res.clearCookie('adminSession');\n    res.json({ success: true });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n", "import { pgTable, text, serial, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const enquiries = pgTable(\"enquiries\", {\n  id: serial(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  checkinDate: text(\"checkin_date\"),\n  checkoutDate: text(\"checkout_date\"),\n  guests: integer(\"guests\"),\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertEnquirySchema = createInsertSchema(enquiries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertEnquiry = z.infer<typeof insertEnquirySchema>;\nexport type Enquiry = typeof enquiries.$inferSelect;\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n", "import 'dotenv/config'; // Load environment variables from .env\nimport postgres from 'postgres'; // Use the postgres package for SQL access\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Check your .env file or environment configuration.\",\n  );\n}\n\n// Connect to Supabase Postgres using the connection string\nexport const client = postgres(process.env.DATABASE_URL, { ssl: 'require' });\nexport const db = drizzle(client, { schema });", "import { users, enquiries, type User, type InsertUser, type Enquiry, type InsertEnquiry } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createEnquiry(enquiry: InsertEnquiry): Promise<Enquiry>;\n  getEnquiries(): Promise<Enquiry[]>;\n  getEnquiry(id: number): Promise<Enquiry | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createEnquiry(insertEnquiry: InsertEnquiry): Promise<Enquiry> {\n    const [enquiry] = await db\n      .insert(enquiries)\n      .values(insertEnquiry)\n      .returning();\n    return enquiry;\n  }\n\n  async getEnquiries(): Promise<Enquiry[]> {\n    return await db.select().from(enquiries).orderBy(desc(enquiries.createdAt));\n  }\n\n  async getEnquiry(id: number): Promise<Enquiry | undefined> {\n    const [enquiry] = await db.select().from(enquiries).where(eq(enquiries.id, id));\n    return enquiry || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n", "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\n\nexport function serveStatic(app: Express) {\n   // Assumes client assets are built into 'dist/public' relative to project root.\n  // __dirname will point to the directory of the compiled utils.js (e.g., dist/server)\n  const distPath = path.resolve(\"dist/server\", \"..\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    log(`Static assets directory not found: ${distPath}. Ensure client is built.`, \"error\");\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n  log(`Serving static files from ${distPath}`);\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    const indexPath = path.resolve(distPath, \"index.html\");\n    if (fs.existsSync(indexPath)) {\n      res.sendFile(indexPath);\n    } else {\n      log(`index.html not found in ${distPath}`, \"error\");\n      res.status(404).send(\"Client application not found. Please build the client.\");\n    }\n  });\n}\n"],
  "mappings": "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",
  "names": ["express", "cookieParser", "createServer", "schema_exports", "__export", "enquiries", "insertEnquirySchema", "insertUserSchema", "users", "pgTable", "text", "serial", "integer", "timestamp", "createInsertSchema", "postgres", "drizzle", "client", "postgres", "db", "drizzle", "schema_exports", "eq", "desc", "DatabaseStorage", "id", "user", "db", "users", "username", "insertUser", "insertEnquiry", "enquiry", "enquiries", "storage", "z", "adminSessions", "generateSessionId", "requireAuth", "req", "res", "next", "sessionId", "registerRoutes", "app", "validatedData", "insertEnquirySchema", "enquiry", "storage", "error", "enquiries", "id", "username", "password", "createServer", "express", "fs", "path", "log", "message", "source", "formattedTime", "serveStatic", "app", "distPath", "_req", "res", "indexPath", "app", "express", "cookieParser", "req", "res", "next", "start", "path", "capturedJsonResponse", "originalResJson", "bodyJson", "args", "duration", "logLine", "log", "server", "registerRoutes", "err", "_req", "_next", "status", "message", "serveStatic", "port"]
}
